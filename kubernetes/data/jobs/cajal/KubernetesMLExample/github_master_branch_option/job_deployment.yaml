apiVersion: batch/v1 # Jobs Default K8 API
kind: Job # This tells kubernetes what kind of class it is working with
metadata:
  name: resnet-benchmark-job # Name of the Job
spec:
  parallelism: 1 # Run one instance of Resnet benchmark DO NOT CHANGE THIS AS THIS IS TUTORIAL JOB (IT WILL GET IN THE WAY OF OUR ACTUAL WORK)
  template: # Pod Templete
    spec:
      restartPolicy: OnFailure # Options are OnFailure, and Never.
      hostNetwork: true # This option will allow the pod to use the host network for internet access
      priorityClassName: low-priority # Set the pod to be low priority meaning it will be evicted by default and higher prioity pods
      tolerations: # This toleration allows the pod to be schedule onto gpu-only pod machines, remove this if you are not using gpu
      - key: "gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      volumes: # Example volume mounting for scratch07
      - name: mnt # name for the volume to be reference in container volumeMounts
        hostPath:
          path: /mnt # Directory on the host machine to be mounted
      affinity: # Affinity to select certain nodes with 11GB, 12GB, or 24GB memory
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution: # Require nodes to have this label
            nodeSelectorTerms:
            - matchExpressions:
              - key: gpu_mem_size # Target label is gpu_mem_size
                operator: In # Key must have one of the following values
                values:
                - 11GB
                - 12GB
                - 24GB
      containers: # Container Level
      - name: kubernetes-ml-example # Container name (Can be set to whatever)
        image: synicix/kubernetes_ml_example:latest # Docker Image hosted on Docker Hub
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPUs
        volumeMounts: # Container reference to volumes define above
        - name: mnt # Name of the volume define above
          mountPath: /mnt # Location of where to mount it in the container
        env: # This section refers to secrets created under the user namespace and set them as enviorment variables
        - name: DJ_HOST
          valueFrom:
            secretKeyRef:
              name: datajoint-credentials
              key: DJ_HOST
        - name: DJ_USER
          valueFrom:
            secretKeyRef:
              name: datajoint-credentials
              key: DJ_USER
        - name: DJ_PASS
          valueFrom:
            secretKeyRef:
              name: datajoint-credentials
              key: DJ_PASS
        - name: GITHUB_USERNAME
          valueFrom:
            secretKeyRef:
              name: github-credentials
              key: GITHUB_USERNAME
        - name: GITHUB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: github-credentials
              key: GITHUB_PASSWORD
        command: ["/bin/bash"] # Entry point for the container
        args: ["-c", "git clone https://$(GITHUB_USERNAME):$(GITHUB_PASSWORD)@github.com/cajal/KubernetesMLExample.git \
        && python3 -u KubernetesMLExample/resnet_benchmark/resnet_benchmark.py"] # sh commands to clone and run python script